// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

type Queue_Expecter struct {
	mock *mock.Mock
}

func (_m *Queue) EXPECT() *Queue_Expecter {
	return &Queue_Expecter{mock: &_m.Mock}
}

// ClearQueue provides a mock function with given fields:
func (_m *Queue) ClearQueue() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queue_ClearQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearQueue'
type Queue_ClearQueue_Call struct {
	*mock.Call
}

// ClearQueue is a helper method to define mock.On call
func (_e *Queue_Expecter) ClearQueue() *Queue_ClearQueue_Call {
	return &Queue_ClearQueue_Call{Call: _e.mock.On("ClearQueue")}
}

func (_c *Queue_ClearQueue_Call) Run(run func()) *Queue_ClearQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queue_ClearQueue_Call) Return(_a0 error) *Queue_ClearQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Queue_ClearQueue_Call) RunAndReturn(run func() error) *Queue_ClearQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Dequeue provides a mock function with given fields:
func (_m *Queue) Dequeue() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type Queue_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
func (_e *Queue_Expecter) Dequeue() *Queue_Dequeue_Call {
	return &Queue_Dequeue_Call{Call: _e.mock.On("Dequeue")}
}

func (_c *Queue_Dequeue_Call) Run(run func()) *Queue_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queue_Dequeue_Call) Return(_a0 interface{}, _a1 error) *Queue_Dequeue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Queue_Dequeue_Call) RunAndReturn(run func() (interface{}, error)) *Queue_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: item
func (_m *Queue) Enqueue(item interface{}) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type Queue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - item interface{}
func (_e *Queue_Expecter) Enqueue(item interface{}) *Queue_Enqueue_Call {
	return &Queue_Enqueue_Call{Call: _e.mock.On("Enqueue", item)}
}

func (_c *Queue_Enqueue_Call) Run(run func(item interface{})) *Queue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Queue_Enqueue_Call) Return(_a0 error) *Queue_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Queue_Enqueue_Call) RunAndReturn(run func(interface{}) error) *Queue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAllMessages provides a mock function with given fields:
func (_m *Queue) ReadAllMessages() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadAllMessages")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue_ReadAllMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAllMessages'
type Queue_ReadAllMessages_Call struct {
	*mock.Call
}

// ReadAllMessages is a helper method to define mock.On call
func (_e *Queue_Expecter) ReadAllMessages() *Queue_ReadAllMessages_Call {
	return &Queue_ReadAllMessages_Call{Call: _e.mock.On("ReadAllMessages")}
}

func (_c *Queue_ReadAllMessages_Call) Run(run func()) *Queue_ReadAllMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queue_ReadAllMessages_Call) Return(_a0 []interface{}, _a1 error) *Queue_ReadAllMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Queue_ReadAllMessages_Call) RunAndReturn(run func() ([]interface{}, error)) *Queue_ReadAllMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields:
func (_m *Queue) Size() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type Queue_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *Queue_Expecter) Size() *Queue_Size_Call {
	return &Queue_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *Queue_Size_Call) Run(run func()) *Queue_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queue_Size_Call) Return(_a0 int, _a1 error) *Queue_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Queue_Size_Call) RunAndReturn(run func() (int, error)) *Queue_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
