package messages

import (
	"encoding/json"

	"github.com/cbodonnell/flywheel/pkg/kinematic"
)

const (
	// MessageBufferSize represents the maximum size of a message
	// TODO: determine a more appropriate size
	MessageBufferSize = 512
)

// Message types
type MessageType uint8

const (
	MessageTypeServerAssignID MessageType = iota
	MessageTypeClientPing
	MessageTypeServerPong
	MessageTypeClientPlayerUpdate
	MessageTypeServerGameUpdate
	MessageTypeClientSyncTime
	MessageTypeServerSyncTime
	MessageTypeServerPlayerConnect
	MessageTypeServerPlayerDisconnect
)

func (m MessageType) String() string {
	return [...]string{
		"ServerAssignID",
		"ClientPing",
		"ServerPong",
		"ClientPlayerUpdate",
		"ServerGameUpdate",
		"ClientSyncTime",
		"ServerSyncTime",
		"ServerPlayerConnect",
		"ServerPlayerDisconnect",
	}[m]
}

// Message represents a generic message for serialization/deserialization
type Message struct {
	ClientID uint32          `json:"clientID"`
	Type     MessageType     `json:"type"`
	Payload  json.RawMessage `json:"payload"`
}

type AssignID struct {
	ClientID uint32 `json:"clientID"`
}

const (
	// MaxPreviousUpdates is the maximum number of previous updates to send to the server
	// TODO: determine a more appropriate size
	MaxPreviousUpdates = 2
)

// TODO: change this to a more generic client input message
// with a type field to differentiate between different input types (move, jump, fire, etc.)
type ClientPlayerUpdate struct {
	// Timestamp is the time at which the update was generated by the client
	Timestamp int64 `json:"timestamp"`
	// InputX is the x-axis input from the client ranging from -1 to 1
	InputX float64 `json:"inputX"`
	// InputY is the y-axis input from the client ranging from -1 to 1
	InputY float64 `json:"inputY"`
	// InputJump is the jump input from the client
	InputJump bool `json:"inputJump"`
	// DeltaTime is the time since the last update as recorded by the client
	DeltaTime float64 `json:"deltaTime"`
	// PastUpdates is a list of past updates from the client to
	// mitigate the effects of packet loss and out-of-order delivery
	PastUpdates []*ClientPlayerUpdate `json:"previousUpdates"`
}

// ServerGameUpdate is a message sent by the server to update clients on the game state
type ServerGameUpdate struct {
	// Timestamp is the time at which the update was generated by the server
	Timestamp int64 `json:"timestamp"`
	// Players maps client IDs to player states
	Players map[uint32]*PlayerStateUpdate `json:"players"`
	// NPCs maps enemy IDs to NPC states
	NPCs map[uint32]*NPCStateUpdate `json:"npcs"`
}

// PlayerStateUpdate is a message sent by the server to update clients on a player's state
type PlayerStateUpdate struct {
	// LastProcessedTimestamp is the timestamp of the last processed update
	LastProcessedTimestamp int64 `json:"lastProcessedTimestamp"`
	// Position is the position of the player
	Position kinematic.Vector `json:"position"`
	// Velocity is the velocity of the player
	Velocity kinematic.Vector `json:"velocity"`
	// IsOnGround is a flag indicating whether the player is on the ground
	IsOnGround bool `json:"isOnGround"`
	// Animation is the current animation of the player
	Animation uint8 `json:"animation"`
	// AnimationFlip is a flag indicating whether the animation should be flipped
	AnimationFlip bool `json:"animationFlip"`
}

// NPCStateUpdate is a message sent by the server to update clients on an NPC's state
type NPCStateUpdate struct {
	// Position is the position of the NPC
	Position kinematic.Vector `json:"position"`
	// Velocity is the velocity of the NPC
	Velocity kinematic.Vector `json:"velocity"`
	// IsOnGround is a flag indicating whether the NPC is on the ground
	IsOnGround bool `json:"isOnGround"`
}

// ClientSyncTime is a message sent by the client to request a time sync with the server
type ClientSyncTime struct {
	// Timestamp is the time at which the sync request was generated by the client
	Timestamp int64 `json:"timestamp"`
}

// ServerSyncTime is a message sent by the server in response to a time sync request
type ServerSyncTime struct {
	// Timestamp is the time at which the sync response was generated by the server
	Timestamp int64 `json:"timestamp"`
	// ClientTimestamp is the time at which the sync request was generated by the client
	ClientTimestamp int64 `json:"clientTimestamp"`
}

// ServerPlayerConnect is a message sent by the server to notify clients that a new player has connected
type ServerPlayerConnect struct {
	// ClientID is the ID of the player that has connected
	ClientID uint32 `json:"clientID"`
	// PlayerState is the state of the player that has connected
	PlayerState *PlayerStateUpdate `json:"playerState"`
}

// ServerPlayerDisconnect is a message sent by the server to notify clients that a player has disconnected
type ServerPlayerDisconnect struct {
	// ClientID is the ID of the player that has disconnected
	ClientID uint32 `json:"clientID"`
}
