package messages

import (
	"encoding/json"
)

const (
	// MessageBufferSize represents the maximum size of a message
	MessageBufferSize = 1024
)

// Message types
const (
	MessageTypeServerAssignID     = "aid"
	MessageTypeClientPing         = "cp"
	MessageTypeServerPong         = "sp"
	MessageTypeClientPlayerUpdate = "cpu"
	MessageTypeServerGameUpdate   = "sgu"
)

// Message represents a generic message for serialization/deserialization
type Message struct {
	ClientID uint32          `json:"clientID"`
	Type     string          `json:"type"`
	Payload  json.RawMessage `json:"payload"`
}

type AssignID struct {
	ClientID uint32 `json:"clientID"`
}

// TODO: change this to a more generic client input message
// with a type field to differentiate between different input types (move, jump, fire, etc.)
type ClientPlayerUpdate struct {
	// Timestamp is the time at which the update was generated by the client
	Timestamp int64 `json:"timestamp"`
	// InputX is the x-axis input from the client ranging from -1 to 1
	InputX float64 `json:"inputX"`
	// InputY is the y-axis input from the client ranging from -1 to 1
	InputY float64 `json:"inputY"`
	// InputJump is the jump input from the client
	InputJump bool `json:"inputJump"`
	// DeltaTime is the time since the last update as recorded by the client
	DeltaTime float64 `json:"deltaTime"`
}
