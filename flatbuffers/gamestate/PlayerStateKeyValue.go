// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerStateKeyValue struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerStateKeyValue(buf []byte, offset flatbuffers.UOffsetT) *PlayerStateKeyValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerStateKeyValue{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerStateKeyValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerStateKeyValue(buf []byte, offset flatbuffers.UOffsetT) *PlayerStateKeyValue {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerStateKeyValue{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerStateKeyValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerStateKeyValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerStateKeyValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerStateKeyValue) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerStateKeyValue) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *PlayerStateKeyValue) Value(obj *PlayerState) *PlayerState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PlayerState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PlayerStateKeyValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PlayerStateKeyValueAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(0, key, 0)
}
func PlayerStateKeyValueAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func PlayerStateKeyValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
