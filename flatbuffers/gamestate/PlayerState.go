// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerState struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerState(buf []byte, offset flatbuffers.UOffsetT) *PlayerState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerState{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerState(buf []byte, offset flatbuffers.UOffsetT) *PlayerState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerState) LastProcessedTimestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerState) MutateLastProcessedTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PlayerState) CharacterId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerState) MutateCharacterId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *PlayerState) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlayerState) Position(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerState) Velocity(obj *Velocity) *Velocity {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Velocity)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerState) IsOnGround() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PlayerState) MutateIsOnGround(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *PlayerState) IsAttacking() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PlayerState) MutateIsAttacking(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *PlayerState) Animation() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerState) MutateAnimation(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *PlayerState) AnimationFlip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PlayerState) MutateAnimationFlip(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *PlayerState) AnimationSequence() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerState) MutateAnimationSequence(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func (rcv *PlayerState) Hitpoints() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerState) MutateHitpoints(n int16) bool {
	return rcv._tab.MutateInt16Slot(24, n)
}

func PlayerStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func PlayerStateAddLastProcessedTimestamp(builder *flatbuffers.Builder, lastProcessedTimestamp int64) {
	builder.PrependInt64Slot(0, lastProcessedTimestamp, 0)
}
func PlayerStateAddCharacterId(builder *flatbuffers.Builder, characterId int32) {
	builder.PrependInt32Slot(1, characterId, 0)
}
func PlayerStateAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func PlayerStateAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(position), 0)
}
func PlayerStateAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(velocity), 0)
}
func PlayerStateAddIsOnGround(builder *flatbuffers.Builder, isOnGround bool) {
	builder.PrependBoolSlot(5, isOnGround, false)
}
func PlayerStateAddIsAttacking(builder *flatbuffers.Builder, isAttacking bool) {
	builder.PrependBoolSlot(6, isAttacking, false)
}
func PlayerStateAddAnimation(builder *flatbuffers.Builder, animation byte) {
	builder.PrependByteSlot(7, animation, 0)
}
func PlayerStateAddAnimationFlip(builder *flatbuffers.Builder, animationFlip bool) {
	builder.PrependBoolSlot(8, animationFlip, false)
}
func PlayerStateAddAnimationSequence(builder *flatbuffers.Builder, animationSequence byte) {
	builder.PrependByteSlot(9, animationSequence, 0)
}
func PlayerStateAddHitpoints(builder *flatbuffers.Builder, hitpoints int16) {
	builder.PrependInt16Slot(10, hitpoints, 0)
}
func PlayerStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
