// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NPCStateUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsNPCStateUpdate(buf []byte, offset flatbuffers.UOffsetT) *NPCStateUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NPCStateUpdate{}
	x.Init(buf, n+offset)
	return x
}

func FinishNPCStateUpdateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNPCStateUpdate(buf []byte, offset flatbuffers.UOffsetT) *NPCStateUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NPCStateUpdate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNPCStateUpdateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NPCStateUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NPCStateUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NPCStateUpdate) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NPCStateUpdate) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *NPCStateUpdate) NpcId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NPCStateUpdate) MutateNpcId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *NPCStateUpdate) NpcState(obj *NPCState) *NPCState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NPCState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func NPCStateUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NPCStateUpdateAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func NPCStateUpdateAddNpcId(builder *flatbuffers.Builder, npcId uint32) {
	builder.PrependUint32Slot(1, npcId, 0)
}
func NPCStateUpdateAddNpcState(builder *flatbuffers.Builder, npcState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(npcState), 0)
}
func NPCStateUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
